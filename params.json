{"name":"pyFxTrader","tagline":"","body":"# pyFxTrader\r\n=========\r\n\r\n\r\n## Scope\r\n\r\n- The goal is to provide a backtesting and live trading tool, which can run\r\n  multiple strategies on up to 10 currency pairs.\r\n- Strategies can monitor up to three timeframes (e.g. H1, H2 and D1) and \r\n  calculate buy/sell actions based on them.\r\n\r\n\r\n## Strategy\r\n\r\n### Indicators\r\n\r\nCurrently implemented are\r\n\r\n- MACD\r\n- SMA\r\n- RSI\r\n\r\nMany others can also be used from `TA-Lib` or `numpy`.\r\n\r\n\r\n### Timeframes\r\n\r\n* OANDA supports a wide range of timeframes. You can find all supported values [here](http://developer.oanda.com/rest-live/rates/#retrieveInstrumentHistory).\r\n\r\n\r\n## TODO\r\n\r\n- Add Matplot/Plot.ly support. See also following [tutorial](http://www.randalolson.com/2014/06/28/how-to-make-beautiful-data-visualizations-in-python-with-matplotlib/).\r\n- Implement proxy class for backtesting, which will first check if data is \r\n  available locally and only then fetch/save via API.\r\n- Implement usage of ETags to reduce traffic/latency.\r\n- Prepare Makefile.\r\n\r\n\r\n## Installation\r\n\r\n    git clone git@github.com:jmelett/pyFxTrader.git\r\n    cd pyFxTrader\r\n    virtualenv env\r\n    source env/bin/activate\r\n    pip install -r requirements.txt\r\n    python pyFxTrader/app.py -h","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}